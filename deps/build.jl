using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(joinpath(@__DIR__, "usr"), ["libpicosat"], :libpicosat),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/MaximeBouton/PicoSATBuilder/releases/download/v9.6.0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/PicoSATBuilder.v9.6.0.i686-linux-gnu.tar.gz", "82baf9a3cfa4f471d58bfa92e2d1c11238623a0af0464739ea54595bfc7a0b93"),
    Windows(:i686) => ("$bin_prefix/PicoSATBuilder.v9.6.0.i686-w64-mingw32.tar.gz", "fe806500efaf6f7f7b99d1ace24f8eb9d433c7eb0b8a3a332b337662b45e2089"),
    MacOS(:x86_64) => ("$bin_prefix/PicoSATBuilder.v9.6.0.x86_64-apple-darwin14.tar.gz", "2c399cb27f6ce6557340cb513c82246616dab9b5376fcb9112845c86d8c88f9b"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/PicoSATBuilder.v9.6.0.x86_64-linux-gnu.tar.gz", "69780a6af6f54402fa1ccb31bb133865bc93de0e8f0bcf95d0f09464999547d8"),
    Windows(:x86_64) => ("$bin_prefix/PicoSATBuilder.v9.6.0.x86_64-w64-mingw32.tar.gz", "237ee8dc7d7a75a4969bb4542b3e6ad6bf73c896099502a7a108cccb3343e69d"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)